# Coded by Emiliano German Solazzi Griminger

from blockchain import BlockchainClient
from wallet import Wallet
from lightning import LightningNode, LightningClient, LightningExplorer
from visualization import NetworkGraph

class LightningNetworkSpecialist:
    def __init__(self, blockchain: BlockchainClient):
        self._blockchain = blockchain
        self._wallet = Wallet(blockchain)
        self._lightning_node = LightningNode(blockchain)
        self._lightning_client = LightningClient(self._wallet, blockchain)
        self._lightning_explorer = LightningExplorer(NetworkGraph())

    def start(self):
        """
        Start the Lightning Network Specialist.

        This method initiates synchronization with the Lightning Network and starts the network explorer.
        """
        try:
            self._lightning_node.sync()
            self._lightning_explorer.web_ui()
        except Exception as e:
            print(f"Error starting Lightning Network Specialist: {e}")

    def process_payment(self, payment_data):
        """
        Process a payment.

        Args:
            payment_data (dict): Data containing payment information.
        """
        try:
            payment = self._wallet.create_payment(payment_data)
            self._lightning_client.make_payment(payment, self._on_payment_complete)
        except Exception as e:
            print(f"Error processing payment: {e}")

    def _on_payment_complete(self, error):
        """
        Callback function to handle payment completion.

        Args:
            error (bool): Indicates whether the payment was successful or not.
        """
        if error:
            print("Payment failed")
        else:
            print("Payment completed!")

    def create_account(self, username):
        """
        Create a new account.

        Args:
            username (str): Username for the new account.

        Returns:
            str: Seed for the newly created account.
        """
        try:
            return self._lightning_client.create_account(username)
        except Exception as e:
            print(f"Error creating account: {e}")

    def fund_account(self, username, amount):
        """
        Fund an account.

        Args:
            username (str): Username of the account to fund.
            amount (float): Amount to fund the account with.
        """
        try:
            self._lightning_client.fund_account(username, amount)
        except Exception as e:
            print(f"Error funding account: {e}")

    def sync_network(self):
        """
        Synchronize the Lightning Network.
        """
        try:
            self._lightning_node.sync()
        except Exception as e:
            print(f"Error synchronizing Lightning Network: {e}")

    def stop(self):
        """
        Stop the Lightning Network Specialist.

        This method stops the network explorer and cleans up resources.
        """
        try:
            # Perform any cleanup tasks here
            pass
        except Exception as e:
            print(f"Error stopping Lightning Network Specialist: {e}")
