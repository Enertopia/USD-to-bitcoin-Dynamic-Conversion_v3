# Copyright (c) 2023 by Emiliano German Solazzi Griminger, Bitcoincab Inc. All rights reserved.

import logging
import os
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from wtforms import ValidationError
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required
from datetime import timedelta

# Initialize Flask app and configure extensions
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URI')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY')
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)
db = SQLAlchemy(app)
jwt = JWTManager(app)

# Initialize rate limiter
limiter = Limiter(app, key_func=get_remote_address)
limiter.limit("100/minute")

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Define Balance model for the database
class Balance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    account_balance = db.Column(db.Float, default=100000)
    wallet_balance = db.Column(db.Float, default=0)
    total_bitcoin_converted = db.Column(db.Float, default=0.0)

# Store API keys securely hashed
API_KEY = generate_password_hash(os.getenv('API_KEY'))

def validate_api_key(api_key):
    return check_password_hash(API_KEY, api_key)

def validate_input(data):
    if 'amount' not in data:
        raise ValidationError("Missing amount parameter")
    try:
        amount = float(data['amount'])
        if amount < 0:
            raise ValidationError("Invalid amount: must be non-negative")
    except ValueError as ve:
        raise ValidationError(f"Invalid amount: {ve}")
    except Exception as e:
        raise ValidationError(f"An unexpected error occurred: {e}")

# Placeholder for input sanitization
def sanitize_input(data):
    # Add sanitization logic here if needed
    # Example: data['amount'] = clean_data(data['amount'])
    pass

@app.before_request
def limit_remote_addr():
    if request.method != 'GET':
        limiter.check()

@app.route("/api/v1/convert", methods=['POST'])
@jwt_required()
def convert():
    try:
        # Simulating a merchant request
        merchant_data = {
            'amount': request.form.get('amount'),
            'merchant_percentage': request.form.get('merchant_percentage', 0.05),
        }

        # Validate and sanitize merchant input
        sanitize_input(merchant_data)
        validate_input(merchant_data)

        # Calculate the amount to be converted to Bitcoin
        amount_fiat = float(merchant_data['amount'])
        merchant_percentage = float(merchant_data['merchant_percentage'])

        # Simulate the conversion to Bitcoin
        balance = Balance.query.first_or_404(description='No balance record found')
        balance.account_balance -= amount_fiat * merchant_percentage
        amount_to_wallet = amount_fiat * merchant_percentage * 0.000020
        balance.wallet_balance += amount_to_wallet
        balance.total_bitcoin_converted += amount_to_wallet
        db.session.commit()

        # Return success response
        return jsonify({'success': True, 'converted_amount': amount_to_wallet})

    except ValidationError as e:
        # Log detailed validation error information
        logging.error(f"Validation error: {str(e)}")
        # Return error response
        return jsonify({'success': False, 'error': str(e)}), 400

    except Exception as e:
        # Log unexpected error information
        logging.error(f"Unexpected error: {str(e)}")
        # Return generic error response
        return jsonify({'success': False, 'error': 'An unexpected error occurred'}), 500

if __name__ == '__main__':
    app.run(port=3000)
