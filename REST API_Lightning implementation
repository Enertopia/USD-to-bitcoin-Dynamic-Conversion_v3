# Coded by Emiliano German Solazzi Griminger, 2023

from flask import Flask, jsonify, make_response, request
from flask_restful import Api
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_oauthlib.provider import OAuth2Provider
from flask_caching import Cache
from flask_limiter import Limiter
from opentracing.ext import tags
from opentracing.propagation import Format
from werkzeug.exceptions import HTTPException

# Instrumentation
import opentracing
from jaeger_client import Config

# Import Blueprints
from blueprints.user import user_api
from blueprints.wallet import wallet_api
from blueprints.invoice import invoice_api
from blueprints.payment import payment_api

# Create Flask app
app = Flask(__name__)

# Initialize API
api = Api(app)

# Initialize SQLAlchemy
db = SQLAlchemy(app)

# Initialize Marshmallow for object serialization
ma = Marshmallow(app)

# Initialize OAuth2Provider for OAuth authentication
oauth = OAuth2Provider(app)

# Initialize caching
cache = Cache(app)

# Initialize rate limiting
limiter = Limiter(app)

# Initialize Jaeger tracer for distributed tracing
config = Config(
    config={
        'sampler': {
            'type': 'const',
            'param': 1,
        }
    }
)
tracer = config.initialize_tracer()

# Register blueprints
app.register_blueprint(user_api)
app.register_blueprint(wallet_api)
app.register_blueprint(invoice_api)
app.register_blueprint(payment_api)

# OAuth client getter
@oauth.clientgetter
def get_client(client_id):
    return Client.query.filter_by(client_id=client_id).first()

# Custom JSON output function
@api.representation('application/json')
def output_json(data, code, headers=None):
    response = make_response(jsonify(data), code)
    response.headers.extend(headers or {})
    return response

# OpenAPI documentation
@app.route('/spec')
def spec():
    swag = swagger(app)
    swag['info']['version'] = "1.0"
    swag['info']['title'] = "Lightning API"
    return jsonify(swag)

# Tracing middleware
@app.before_request
def start_trace():
    span_ctx = tracer.extract(Format.HTTP_HEADERS, request.headers)
    span_tags = {tags.COMPONENT: 'api'}
    span = tracer.start_span('request', child_of=span_ctx, tags=span_tags)
    span.set_tag(tags.HTTP_METHOD, request.method)
    span.set_tag(tags.HTTP_URL, request.path)
    g.trace_span = span

@app.after_request
def end_trace(response):
    if hasattr(g, 'trace_span'):
        g.trace_span.set_tag(tags.HTTP_STATUS_CODE, response.status_code)
        g.trace_span.finish()
    return response

# Error handling middleware
@app.errorhandler(Exception)
def handle_error(error):
    code = 500
    if isinstance(error, HTTPException):
        code = error.code
    return jsonify(error=str(error)), code

# Run Flask app
if __name__ == '__main__':
    app.run(debug=True)
