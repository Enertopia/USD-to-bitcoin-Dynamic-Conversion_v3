# Copyright 2023 Emiliano German Solazzi Griminger

from flask import Flask, request, jsonify, make_response
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from wtforms import ValidationError
import bleach
import logging

app = Flask(__name__)
limiter = Limiter(app, key_func=get_remote_address)
limiter.limit("100/minute") 

# API key for authentication 
API_KEY = 'secret-api-key' 

@app.before_request
def limit_remote_addr():
    if request.method != 'GET':
        limiter.check()
        
@app.before_request
def validate_api_key():
    if request.args.get('api_key') != API_KEY:
        return jsonify({"error": "Invalid API key"}), 401
        
def sanitize_input(data):
    data['amount'] = bleach.clean(data.get('amount')) 
    data['percentage'] = bleach.clean(data.get('percentage'))
    return data

def validate_input(data):
    if 'amount' not in data:
        raise ValidationError("Missing amount parameter")
    try:
        amount = float(data['amount'])
        if amount < 0:
            raise ValidationError("Invalid amount")
    except ValueError:
        raise ValidationError("Invalid amount")
        
    if 'percentage' not in data:
        data['percentage'] = 0.05
    try:
        percentage = float(data['percentage'])
        if not 0 <= percentage <= 1:
            raise ValidationError("Invalid percentage")
    except ValueError:
        raise ValidationError("Invalid percentage")
        

@app.route("/convert")
def convert():
    data = sanitize_input(request.args) 
    validate_input(data)
    
    # Conversion logic
    
    response = jsonify({"result": "success"})
    return response, 200

@app.after_request
def set_security_headers(response):
    response.headers['X-Frame-Options'] = 'SAMEORIGIN'
    response.headers['X-XSS-Protection'] = '1; mode=block' 
    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'

    return response

if __name__ == '__main__':
    app.run(debug=True, ssl_context='adhoc')
