# Copyright Emiliano German Solazzi Griminger 2023
import logging
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from wtforms import ValidationError
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
limiter = Limiter(app, key_func=get_remote_address)
limiter.limit("100/minute")

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Placeholder for a bank account balance (in fiat)
BANK_ACCOUNT_BALANCE = 100000  # Example starting balance: $100,000

# Placeholder for a Bitcoin wallet balance
WALLET_BALANCE = 0  # Example starting balance: 0 BTC

# Constants
CONVERSION_RATE = 0.000020  # Example conversion rate: 1 fiat = 0.000020 BTC
MERCHANT_CONVERSION_PERCENTAGE = 0.05  # Merchant's preset conversion percentage

# Store API keys securely hashed
API_KEY = generate_password_hash('secret-key')

def validate_api_key(key):
    return check_password_hash(API_KEY, key)

def validate_input(data):
    if 'amount' not in data:
        raise ValidationError("Missing amount parameter")
    try:
        amount = float(data['amount'])
        if amount < 0:
            raise ValidationError("Invalid amount")
    except ValueError:
        raise ValidationError("Invalid amount")

# Placeholder for input sanitization
def sanitize_input(data):
    # Add your sanitization logic here if needed
    pass

@app.before_request
def limit_remote_addr():
    if request.method != 'GET':
        limiter.check()

@app.before_request
def validate_api_key():
    if request.args.get('api_key') != API_KEY:
        return jsonify({"error": "Invalid API key"}), 401

@app.route("/convert", methods=['POST'])
def convert():
    try:
        # Simulating a customer request
        customer_data = {
            'amount': request.form.get('amount'),
        }

        # Validate and sanitize customer input
        sanitize_input(customer_data)
        validate_input(customer_data)

        # Calculate the amount to be converted to Bitcoin
        amount_fiat = float(customer_data['amount'])
        amount_to_convert = amount_fiat * MERCHANT_CONVERSION_PERCENTAGE

        # Simulate the conversion to Bitcoin
        global BANK_ACCOUNT_BALANCE
        BANK_ACCOUNT_BALANCE -= amount_to_convert
        amount_to_wallet = amount_to_convert * CONVERSION_RATE
        global WALLET_BALANCE
        WALLET_BALANCE += amount_to_wallet

        # For illustration purposes, let's assume a successful conversion
        conversion_result = {
            'result': 'success',
            'amount_fiat': amount_fiat,
            'amount_to_convert': amount_to_convert,
            'amount_to_wallet': amount_to_wallet,
            'conversion_rate': CONVERSION_RATE,
            'merchant_conversion_percentage': MERCHANT_CONVERSION_PERCENTAGE,
            'bank_account_balance': BANK_ACCOUNT_BALANCE,
            'wallet_balance': WALLET_BALANCE
        }

        # Return the result to the customer
        return jsonify(conversion_result), 200

    except (ValidationError, ValueError) as e:
        return jsonify({"error": str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True)
